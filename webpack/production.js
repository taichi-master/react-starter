const path = require( 'path' )

const webpack = require( 'webpack' ),
      { merge } = require( 'webpack-merge' ),
      { CleanWebpackPlugin } = require( 'clean-webpack-plugin' ),
      MiniCssExtractPlugin = require( 'mini-css-extract-plugin' ),
      TerserPlugin = require( 'terser-webpack-plugin' ),
      CssMinimizerPlugin = require( 'css-minimizer-webpack-plugin' ),
      LodashModuleReplacementPlugin = require( 'lodash-webpack-plugin' ),
      { WebpackManifestPlugin } = require( 'webpack-manifest-plugin' )

const commonConfig = require( './base.js' )( false )

const DIST_DIR = path.resolve( __dirname, '../dist' ),
      LIBS_DIR = path.resolve( __dirname, '../server/libs' )

module.exports = ( env ) => {
  const isBuild = env && env.build || false
  // isPreview = env && env.preview || false

  const web_config = merge( commonConfig, {
    mode: isBuild ? 'production' : 'none',

    target: 'web',

    devtool: isBuild ? 'source-map' : false,

    entry: {
      main: './main.js'
    },
    
    performance: {
      maxEntrypointSize: 400000,
      maxAssetSize: 320000
    },
  
    output: {
      publicPath: '', // this fix 'auto' prefix generated by webpack-manifest-plugin
      path: DIST_DIR,
      filename: isBuild ? '[name].[contenthash].js' : '[name].js'
    },

    optimization: {
      minimize: isBuild,
      minimizer: [ new TerserPlugin( {} ), new CssMinimizerPlugin() ]
    },

    plugins: [
      new CleanWebpackPlugin( { cleanOnceBeforeBuildPatterns: [ DIST_DIR ] } ),
      new MiniCssExtractPlugin( { filename: isBuild ? '[name].[contenthash].css' : '[name].css' } ),
      new WebpackManifestPlugin(),
      new webpack.DefinePlugin( {
        'process.env': {
          BROWSER: JSON.stringify( true ),
          NODE_ENV: JSON.stringify( 'production' )
        }
      } )
    ]
  } )

  const node_config = merge( commonConfig, {
    mode: isBuild ? 'production' : 'development',

    target: 'node',

    devtool: false,

    entry: {
      utils: './utils/index',
      App: './components/app',
      reducers: './models/reducers'
    },

    output: {
      path: LIBS_DIR,
      filename: '[name].js',
      libraryTarget: 'commonjs2'
    },

    externals: /^[a-z\-0-9]+$/,

    optimization: {
      runtimeChunk: false
    },

    plugins: [
      new LodashModuleReplacementPlugin(),
      new CleanWebpackPlugin( { cleanOnceBeforeBuildPatterns: [ LIBS_DIR ] } ),
      new MiniCssExtractPlugin( {
        filename: 'dummy.css'
      } ),
      new webpack.DefinePlugin( {
        'process.env': {
          BROWSER: JSON.stringify( false ),
          NODE_ENV: JSON.stringify( 'production' )
        }
      } )
    ]
  } )

  return [ node_config, web_config ]
}